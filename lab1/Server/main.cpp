#include <iostream>
#include <string>
#include <tchar.h>
#include <WinSock2.h>
#include <ctime>
#pragma comment(lib, "WS2_32.lib")
#pragma warning(disable: 4996)

using namespace std;


struct SYNC
{
	SYNC() {}

	SYNC(string command, int correction)
	{
		this->command = command;
		this->correction = correction;
	}

	string command;
	int correction;
};

int GetAverageCorrection(int averageCorrection[], int length);

string GetErrorMessage(int code);
string DefineError(string header, int code);


int _tmain(int argc, _TCHAR* argv[])
{
	try
	{
		cout << "Server's running" << endl;

		SOCKET serverSocket;
		WSADATA wsaData;

		if (WSAStartup(MAKEWORD(2, 0), &wsaData) != 0)
			throw DefineError("Startup: ", WSAGetLastError());

		if ((serverSocket = socket(AF_INET, SOCK_DGRAM, NULL)) == INVALID_SOCKET)
			throw DefineError("Socket: ", WSAGetLastError());

		SOCKADDR_IN serverConfig;
		serverConfig.sin_family = AF_INET;
		serverConfig.sin_port = htons(2000);
		serverConfig.sin_addr.s_addr = INADDR_ANY;

		if (bind(serverSocket, (LPSOCKADDR)&serverConfig, sizeof(serverConfig)) == SOCKET_ERROR)
			throw DefineError("Bind Server: ", WSAGetLastError());

		SYNC receivedData, sentData("SYNC", 0);
		SYSTEMTIME systemTime;
		int averageResults[10];
		clock_t delta;
		int i = 1;
		const int MAX_ITERATION_COUNT = 10;

		for (int i = 0; i != MAX_ITERATION_COUNT; i++)
		{
			SOCKADDR_IN clientConfig;
			int clientConfigLength = sizeof(clientConfig);
			int average = 0;

			GetSystemTime(&systemTime);

			int recvBytes = recvfrom(serverSocket, (char*)&receivedData, sizeof(receivedData), NULL, (sockaddr*)&clientConfig, &clientConfigLength);

			if (recvBytes == SOCKET_ERROR)
				throw DefineError("Receive: ", WSAGetLastError());

			delta = clock();

			int correctionDelta = delta - receivedData.correction;
			sentData.correction = correctionDelta;
			averageResults[i] = correctionDelta;

			average = GetAverageCorrection(averageResults, i + 1);

			int sentBytes = sendto(serverSocket, (char*)&sentData, sizeof(sentData), 0, (sockaddr*)&clientConfig, sizeof(clientConfig));

			if (sentBytes == SOCKET_ERROR)
				throw DefineError("Send: ", WSAGetLastError());

			cout << "DataTime "
				<< systemTime.wMonth << "."
				<< systemTime.wDay << ".2020" << " " << endl
				<< systemTime.wHour + 3 << " Hours "
				<< systemTime.wMinute << " Minuts "
				<< systemTime.wSecond << " Seconds "
				<< systemTime.wMilliseconds << " MiliSeconds " << endl
				<< inet_ntoa(clientConfig.sin_addr) << " Correction = "
				<< sentData.correction << ", Average Correction = "
				<< average << endl << endl << endl;
		}

		if (closesocket(serverSocket) == SOCKET_ERROR)
			throw DefineError("close socket: ", WSAGetLastError());

		if (WSACleanup() == SOCKET_ERROR)
			throw DefineError("Cleanup: ", WSAGetLastError());
	}
	catch (string errorMessage)
	{
		cout << endl << errorMessage << endl;
	}
}


int GetAverageCorrection(int averageCorrection[], int length)
{
	int value = 0;
	for (int i = 0; i < length; i++)
	{
		value += averageCorrection[i];
	}
	return value / length;
}

string GetErrorMessage(int code)
{
	string message;

	switch (code)
	{
	case WSAEINTR:				 message = "Работа функции прервана\n";						  break;
	case WSAEACCES:				 message = "Разрешение отвергнуто\n";						  break;
	case WSAEFAULT:				 message = "Ошибочный адрес\n";								  break;
	case WSAEINVAL:				 message = "Ошибка в аргументе\n";							  break;
	case WSAEMFILE:				 message = "Слишком много файлов открыто\n";				  break;
	case WSAEWOULDBLOCK:		 message = "Ресурс временно недоступен\n";					  break;
	case WSAEINPROGRESS:		 message = "Операция в процессе развития\n";				  break;
	case WSAEALREADY: 			 message = "Операция уже выполняется\n";					  break;
	case WSAENOTSOCK:   		 message = "Сокет задан неправильно\n";						  break;
	case WSAEDESTADDRREQ:		 message = "Требуется адрес расположения\n";				  break;
	case WSAEMSGSIZE:  			 message = "Сообщение слишком длинное\n";				      break;
	case WSAEPROTOTYPE:			 message = "Неправильный тип протокола для сокета\n";		  break;
	case WSAENOPROTOOPT:		 message = "Ошибка в опции протокола\n";					  break;
	case WSAEPROTONOSUPPORT:	 message = "Протокол не поддерживается\n";					  break;
	case WSAESOCKTNOSUPPORT:	 message = "Тип сокета не поддерживается\n";				  break;
	case WSAEOPNOTSUPP:			 message = "Операция не поддерживается\n";					  break;
	case WSAEPFNOSUPPORT:		 message = "Тип протоколов не поддерживается\n";			  break;
	case WSAEAFNOSUPPORT:		 message = "Тип адресов не поддерживается протоколом\n";	  break;
	case WSAEADDRINUSE:			 message = "Адрес уже используется\n";						  break;
	case WSAEADDRNOTAVAIL:		 message = "Запрошенный адрес не может быть использован\n";	  break;
	case WSAENETDOWN:			 message = "Сеть отключена\n";								  break;
	case WSAENETUNREACH:		 message = "Сеть не достижима\n";							  break;
	case WSAENETRESET:			 message = "Сеть разорвала соединение\n";					  break;
	case WSAECONNABORTED:		 message = "Программный отказ связи\n";						  break;
	case WSAECONNRESET:			 message = "Связь восстановлена\n";							  break;
	case WSAENOBUFS:			 message = "Не хватает памяти для буферов\n";				  break;
	case WSAEISCONN:			 message = "Сокет уже подключен\n";							  break;
	case WSAENOTCONN:			 message = "Сокет не подключен\n";							  break;
	case WSAESHUTDOWN:			 message = "Нельзя выполнить send: сокет завершил работу\n";  break;
	case WSAETIMEDOUT:			 message = "Закончился отведенный интервал  времени\n";		  break;
	case WSAECONNREFUSED:		 message = "Соединение отклонено\n";						  break;
	case WSAEHOSTDOWN:			 message = "Хост в неработоспособном состоянии\n";			  break;
	case WSAEHOSTUNREACH:		 message = "Нет маршрута для хоста\n";						  break;
	case WSAEPROCLIM:			 message = "Слишком много процессов\n";						  break;
	case WSASYSNOTREADY:		 message = "Сеть не доступна\n";							  break;
	case WSAVERNOTSUPPORTED:	 message = "Данная версия недоступна\n";					  break;
	case WSANOTINITIALISED:		 message = "Не выполнена инициализация WS2_32.DLL\n";		  break;
	case WSAEDISCON:			 message = "Выполняется отключение\n";						  break;
	case WSATYPE_NOT_FOUND:		 message = "Класс не найден\n";								  break;
	case WSAHOST_NOT_FOUND:		 message = "Хост не найден\n";								  break;
	case WSATRY_AGAIN:			 message = "Неавторизированный хост не найден\n";			  break;
	case WSANO_RECOVERY:		 message = "Неопределенная ошибка\n";						  break;
	case WSANO_DATA:			 message = "Нет записи запрошенного типа\n";				  break;
	case WSA_INVALID_HANDLE:	 message = "Указанный дескриптор события  с ошибкой\n";		  break;
	case WSA_INVALID_PARAMETER:	 message = "Один или более параметров с ошибкой\n";			  break;
	case WSA_IO_INCOMPLETE:		 message = "Объект ввода-вывода не в сигнальном состоянии\n"; break;
	case WSA_IO_PENDING:		 message = "Операция завершится позже\n";					  break;
	case WSA_NOT_ENOUGH_MEMORY:	 message = "Не достаточно памяти\n";						  break;
	case WSA_OPERATION_ABORTED:	 message = "Операция отвергнута\n";							  break;
	case WSAEINVALIDPROCTABLE:	 message = "Ошибочный сервис\n";							  break;
	case WSAEINVALIDPROVIDER:	 message = "Ошибка в версии сервиса\n";						  break;
	case WSAEPROVIDERFAILEDINIT: message = "Невозможно инициализировать сервис\n";			  break;
	case WSASYSCALLFAILURE:		 message = "Аварийное завершение системного вызова\n";		  break;
	default:					 message = "Error\n";										  break;
	};

	return message;
}
string DefineError(string header, int code)
{
	return header + GetErrorMessage(code);
}
